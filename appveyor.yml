environment:
  global:
    # without this flag, debugging is a nightmare :)
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
  matrix:
    # Unfortunately this build does not work with miniconda 32 bit, or so it seems. To re-test one of these days...
#    - PYTHON_VERSION: "3.5"
#      # PYTHON: "C:\\Python35"
#      MINICONDA: "C:\\Miniconda35"
    - PYTHON_VERSION: "3.5"
      # PYTHON: "C:\\Python35-x64"
      MINICONDA: "C:\\Miniconda35-x64"
      QT_VER: 5.6.3
      QT_DIR_REL: Qt5.6.3
      PYQT_VER: 5.6
      PYQT_DIR_REL: PyQt5.6
      MSYS2_DIR: "C:\\msys64"
      MSYSTEM: MINGW64

cache:
  # caching MSYS2 takes more time than installing, so only cache Qt target and PyQt directories.
  - '%QT_DIR_REL%'
  - '%PYQT_DIR_REL% -> ci_tools\build_pyqt.bat'

init:
  - "ECHO %PYTHON_VERSION% %MINICONDA%"  # %PYTHON%

# **** Miniconda version ****
install:
  - set QT_DIR=%APPVEYOR_BUILD_FOLDER%\%QT_DIR_REL%
  - set PYQT_DIR=%APPVEYOR_BUILD_FOLDER%\%PYQT_DIR_REL%

  # (a) setup msys2+mingw 64 (caching MSYS2 takes more time than installing it)
  - echo "Setting up msys2 mingw 64 environment" & call ./ci_tools/setup_msys.bat

  # (b) setup conda, see  https://www.appveyor.com/docs/build-environment/#miniconda and http://help.appveyor.com/discussions/questions/6802-appveyor-with-conda
  - "set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 no
  # - conda update -q conda NO !!!!  #  conda info -a  # Use this to debug conda

  # (c) base conda environment
  - conda create -n envswitch python=%PYTHON_VERSION%
  - activate envswitch
  - conda install "python=%PYTHON_VERSION%" "sip" "pip>=9.0.1" "setuptools=36" -q

  # (d) Compile and install Qt if needed (if no cache available)
  - if not exist %QT_DIR%\bin\Qt5Core.dll (
      echo "No cache found, building qt" &
      call ./ci_tools/build_install_qt.bat
    ) else (
      echo "Found existing cache in %QT_DIR%" &
      dir %QT_DIR%
    )
  - echo "Adding Qt to PATH" & set PATH=%QT_DIR%/bin;%PATH%

  # (e) Compile PyQt if needed (if no cache available)
  # Note: conda should be BEFORE MSYS2 in path for that
  - if not exist %PYQT_DIR%\QtGui.pyi (
      echo "No cache found, building pyqt" &
      RMDIR /S /Q %PYQT_DIR% &
      call ./ci_tools/build_pyqt.bat
    ) else (
      echo "Found existing cache in %PYQT_DIR%" &
      dir %PYQT_DIR%
    )
  - echo "Installing PyQt to python site-packages" & cd "%PYQT_DIR%" & mingw32-make -j 4 install

build: off

test_script:
  # nothing here

after_test:
  # ***packaging for releases***
  - cd %APPVEYOR_BUILD_FOLDER%
  - echo "Creating the appropriate archives into dist/" & mkdir dist
  #- mv %QT_DIR% %APPVEYOR_BUILD_FOLDER%/dist/Qt%QT_VER%_lgpl_minimal-Windows-x86_64/
  - 7z a -ttar -so Qt%QT_VER%_lgpl_minimal-Windows-x86_64.tar Qt%QT_VER% | 7z a -si dist/Qt%QT_VER%_lgpl_minimal-Windows-x86_64.tar.gz
  #- mv %PYQT_DIR% %APPVEYOR_BUILD_FOLDER%/dist/PyQt%PYQT_VER%_gpl_minimal-Windows-x86_64/
  - 7z a -ttar -so PyQt%PYQT_VER%_gpl_minimal-Windows-x86_64.tar PyQt%PYQT_VER% | 7z a -si dist/PyQt%PYQT_VER%_gpl_minimal-Windows-x86_64.tar.gz

artifacts:
#  # bdist_wheel puts your built wheel in the dist directory

  - path: 'dist/Qt%QT_VER%_lgpl_minimal-Windows-x86_64.tar.gz'
#    type: zip

  - path: 'dist/PyQt%PYQT_VER%_gpl_minimal-Windows-x86_64.tar.gz'
#    type: zip

#  - path: dist\*

on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

deploy:
  # release: myproduct-v$(appveyor_build_version)
  description: ''
  provider: GitHub
  auth_token:
    secure: 'SYd5+MMCyCHhSsQ8ZLPnbBC0KbUv/DVDUFTkdCkYd+wJCa2lsxo9w0HzA8Zg11iG' # encrypted token from GitHub
  # artifact: /.*\.nupkg/            # upload all
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
